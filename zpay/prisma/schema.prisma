// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String         @id @default(cuid())
  name             String?
  email            String?        @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  username         String?        @unique
  first_name       String?
  last_name        String?
  phone            String?
  zcashAddress     String?
  isAdmin          Boolean        @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now()) @updatedAt
  accounts         Account[]
  sessions         Session[]
  posts            Post[]
  apiKeys          ApiKey[]
  webhookConfig    WebhookConfig?
  transactions     Transaction[] // Added this relation
  resetToken       String?        @db.Text
  resetTokenExpiry DateTime?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ApiKey {
  id             String          @id @default(cuid())
  key            String          @unique
  name           String?
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  webhookConfigs WebhookConfig[]
  Transaction    Transaction[]
  transactionFee Decimal         @default(1) @db.Decimal(5, 2)
}

model WebhookConfig {
  id        String   @id @default(cuid())
  url       String
  secret    String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  apiKey    ApiKey?  @relation(fields: [apiKeyId], references: [id], onDelete: SetNull)
  apiKeyId  String?
}

model Transaction {
  id     String            @id @default(cuid())
  amount Decimal           @db.Decimal(12, 4)
  status TransactionStatus @default(PENDING)
  fee    Decimal?          @db.Decimal(12, 4)

  // New fields
  invoiceId     String?
  clientUserId  String?
  txHashes      String[] // Array to store multiple transaction hashes
  addressesUsed String[] // Array to store multiple addresses used

  // Metadata
  createdAt   DateTime  @default(now())
  completedAt DateTime?
  updatedAt   DateTime  @updatedAt

  // Relations
  user     User    @relation(fields: [userId], references: [id])
  userId   String
  apiKey   ApiKey? @relation(fields: [apiKeyId], references: [id], onDelete: SetNull)
  apiKeyId String?

  @@index([status])
  @@index([createdAt])
  @@index([userId])
  @@index([apiKeyId])
  @@index([invoiceId])
}

enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REVERSED
}
